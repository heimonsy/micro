// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation/relation.proto

package com.github.heimonsy.micro.apis.relation;

/**
 * Protobuf service {@code relation.RelationService}
 */
public  abstract class RelationService
    implements com.google.protobuf.Service {
  protected RelationService() {}

  public interface Interface {
    /**
     * <pre>
     * FollowUser
     * </pre>
     *
     * <code>rpc FollowUser(.relation.FollowUserRequest) returns (.relation.FollowUserResponse);</code>
     */
    public abstract void followUser(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.FollowUserRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.FollowUserResponse> done);

    /**
     * <pre>
     * GetFollowers
     * </pre>
     *
     * <code>rpc GetFollowers(.relation.GetFollowersRequest) returns (.relation.GetFollowersResponse);</code>
     */
    public abstract void getFollowers(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowersRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowersResponse> done);

    /**
     * <pre>
     * GetFollowings
     * </pre>
     *
     * <code>rpc GetFollowings(.relation.GetFollowingsRequest) returns (.relation.GetFollowingsResponse);</code>
     */
    public abstract void getFollowings(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowingsResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new RelationService() {
      @java.lang.Override
      public  void followUser(
          com.google.protobuf.RpcController controller,
          com.github.heimonsy.micro.apis.relation.FollowUserRequest request,
          com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.FollowUserResponse> done) {
        impl.followUser(controller, request, done);
      }

      @java.lang.Override
      public  void getFollowers(
          com.google.protobuf.RpcController controller,
          com.github.heimonsy.micro.apis.relation.GetFollowersRequest request,
          com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowersResponse> done) {
        impl.getFollowers(controller, request, done);
      }

      @java.lang.Override
      public  void getFollowings(
          com.google.protobuf.RpcController controller,
          com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request,
          com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowingsResponse> done) {
        impl.getFollowings(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.followUser(controller, (com.github.heimonsy.micro.apis.relation.FollowUserRequest)request);
          case 1:
            return impl.getFollowers(controller, (com.github.heimonsy.micro.apis.relation.GetFollowersRequest)request);
          case 2:
            return impl.getFollowings(controller, (com.github.heimonsy.micro.apis.relation.GetFollowingsRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.github.heimonsy.micro.apis.relation.FollowUserRequest.getDefaultInstance();
          case 1:
            return com.github.heimonsy.micro.apis.relation.GetFollowersRequest.getDefaultInstance();
          case 2:
            return com.github.heimonsy.micro.apis.relation.GetFollowingsRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.github.heimonsy.micro.apis.relation.FollowUserResponse.getDefaultInstance();
          case 1:
            return com.github.heimonsy.micro.apis.relation.GetFollowersResponse.getDefaultInstance();
          case 2:
            return com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <pre>
   * FollowUser
   * </pre>
   *
   * <code>rpc FollowUser(.relation.FollowUserRequest) returns (.relation.FollowUserResponse);</code>
   */
  public abstract void followUser(
      com.google.protobuf.RpcController controller,
      com.github.heimonsy.micro.apis.relation.FollowUserRequest request,
      com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.FollowUserResponse> done);

  /**
   * <pre>
   * GetFollowers
   * </pre>
   *
   * <code>rpc GetFollowers(.relation.GetFollowersRequest) returns (.relation.GetFollowersResponse);</code>
   */
  public abstract void getFollowers(
      com.google.protobuf.RpcController controller,
      com.github.heimonsy.micro.apis.relation.GetFollowersRequest request,
      com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowersResponse> done);

  /**
   * <pre>
   * GetFollowings
   * </pre>
   *
   * <code>rpc GetFollowings(.relation.GetFollowingsRequest) returns (.relation.GetFollowingsResponse);</code>
   */
  public abstract void getFollowings(
      com.google.protobuf.RpcController controller,
      com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request,
      com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowingsResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.github.heimonsy.micro.apis.relation.RelationProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.followUser(controller, (com.github.heimonsy.micro.apis.relation.FollowUserRequest)request,
          com.google.protobuf.RpcUtil.<com.github.heimonsy.micro.apis.relation.FollowUserResponse>specializeCallback(
            done));
        return;
      case 1:
        this.getFollowers(controller, (com.github.heimonsy.micro.apis.relation.GetFollowersRequest)request,
          com.google.protobuf.RpcUtil.<com.github.heimonsy.micro.apis.relation.GetFollowersResponse>specializeCallback(
            done));
        return;
      case 2:
        this.getFollowings(controller, (com.github.heimonsy.micro.apis.relation.GetFollowingsRequest)request,
          com.google.protobuf.RpcUtil.<com.github.heimonsy.micro.apis.relation.GetFollowingsResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.github.heimonsy.micro.apis.relation.FollowUserRequest.getDefaultInstance();
      case 1:
        return com.github.heimonsy.micro.apis.relation.GetFollowersRequest.getDefaultInstance();
      case 2:
        return com.github.heimonsy.micro.apis.relation.GetFollowingsRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.github.heimonsy.micro.apis.relation.FollowUserResponse.getDefaultInstance();
      case 1:
        return com.github.heimonsy.micro.apis.relation.GetFollowersResponse.getDefaultInstance();
      case 2:
        return com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.github.heimonsy.micro.apis.relation.RelationService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void followUser(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.FollowUserRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.FollowUserResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.FollowUserResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.github.heimonsy.micro.apis.relation.FollowUserResponse.class,
          com.github.heimonsy.micro.apis.relation.FollowUserResponse.getDefaultInstance()));
    }

    public  void getFollowers(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowersRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowersResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.GetFollowersResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.github.heimonsy.micro.apis.relation.GetFollowersResponse.class,
          com.github.heimonsy.micro.apis.relation.GetFollowersResponse.getDefaultInstance()));
    }

    public  void getFollowings(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request,
        com.google.protobuf.RpcCallback<com.github.heimonsy.micro.apis.relation.GetFollowingsResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.class,
          com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.github.heimonsy.micro.apis.relation.FollowUserResponse followUser(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.FollowUserRequest request)
        throws com.google.protobuf.ServiceException;

    public com.github.heimonsy.micro.apis.relation.GetFollowersResponse getFollowers(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowersRequest request)
        throws com.google.protobuf.ServiceException;

    public com.github.heimonsy.micro.apis.relation.GetFollowingsResponse getFollowings(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.github.heimonsy.micro.apis.relation.FollowUserResponse followUser(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.FollowUserRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.github.heimonsy.micro.apis.relation.FollowUserResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.FollowUserResponse.getDefaultInstance());
    }


    public com.github.heimonsy.micro.apis.relation.GetFollowersResponse getFollowers(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowersRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.github.heimonsy.micro.apis.relation.GetFollowersResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.GetFollowersResponse.getDefaultInstance());
    }


    public com.github.heimonsy.micro.apis.relation.GetFollowingsResponse getFollowings(
        com.google.protobuf.RpcController controller,
        com.github.heimonsy.micro.apis.relation.GetFollowingsRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.github.heimonsy.micro.apis.relation.GetFollowingsResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.github.heimonsy.micro.apis.relation.GetFollowingsResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:relation.RelationService)
}

